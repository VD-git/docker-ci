name: ci

on:
  push:
    branches:
      - "main"
  pull_request:

permissions:
  pull-requests: write # needed to create and update comments in PRs
  security-events: write
  packages: write
  contents: read

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      # Permite realizar o build de imagens em diversas plataformas para agilizar o processo de build das imagens.
      - name: Set up QEMU (Multi-plataform)
        uses: docker/setup-qemu-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Vai permitir o uso do cache para o código ir mais rápido (É o seu BuildKit + Tools do Github Actions).
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "victordias94/cloudbuilder"

      # Irá realizar o smoke test da sua api dentro do próprio github container registry
      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          logout: false
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/VD-git/docker-ci:${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      
      # - name: Smoke test deployment in k3d Kubernetes
      #   run: |
      #     kubectl create secret docker-registry regcred \
      #       --docker-server=https://ghcr.io \
      #       --docker-username=${{ github.actor }} \
      #       --docker-password=${{ secrets.GITHUB_TOKEN }}
      #     export TESTING_IMAGE=ghcr.io/victordias94/mlflow:"$GITHUB_RUN_ID"
      #     envsubst < deployment.yaml  | kubectl apply -f -
      #     kubectl rollout status deployment myapp
      #     kubectl exec deploy/myapp -- curl --fail localhost

      # Para extrair as variáveis de metadata de forma condicional
      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: victordias94/mlflow
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ github.run_id }}
            type=raw,value=04
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            # type=ref,event=pr
            # type=ref,event=branch
            # type=semver,pattern={{version}}

      - name: Build and export to Docker (CI)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false # Não quero fazer o registro dessa imagem, é só para o teste unitário
          load: true # A mantenho em cache para fazer os testes
          tags: ${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # for simple tests (npm test, etc.) just run a local image in docker
      - name: Unit Testing in Docker
        run: |
          container_id=$(docker run -d --rm ${{ github.run_id }})
          sleep 5
          docker stop $container_id

      # faz o teste para validar o commando na sua imagem (troquei para nginx que o mlflow não estava dando exit 2)
      - name: Test healthcheck in Docker Compose
        run: |
          export TESTING_IMAGE="${{ github.run_id }}"
          docker compose -f docker-compose.test.yml up --exit-code-from sut

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          # Condiçao para realizar o push, qualquer uma menos o pull request.
          push: ${{ github.event_name != 'pull_request' }}
          # Coloco o que foi utilizado em cache (Precisa rodar a primeira vez antes de o cache funcionar).
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Adiciono as multiplataformas que diferentes usuários podem utilizar para versionar as imagens utilizadas.
          platforms: linux/amd64
          # outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}
          load: true # Export to Docker Engine rather than pushing to a registry

      # Automatiza comentários para quando a PR é criada
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v3
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed
      
        # If PR, put image tags in the PR comments
      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace

      - name: Wait for 30 seconds
        run: sleep 30

      # Faz o scan do que está acontecendo para ver se está nos conformes (não bloqueia - vide exit-code: 0)
      # Para fazer o teste da imagem, note que uma das tags terá que ser o ${{ github.run_id }}
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: victordias94/mlflow:${{ github.run_id }}
          exit-code: 0
          format: table


      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: victordias94/mlflow:${{ github.run_id }}
          exit-code: 0
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # Interessante que aqui já é possível ver na interface do github mesmo os apontamentos em 'Security' e 'Code Scanning'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  
