name: ci

on:
  push:
    branches:
      - "main"
  pull_request:

permissions:
  pull-requests: write # needed to create and update comments in PRs

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      # Permite realizar o build de imagens em diversas plataformas para agilizar o processo de build das imagens.
      - name: Set up QEMU (Multi-plataform)
        uses: docker/setup-qemu-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Vai permitir o uso do cache para o código ir mais rápido (É o seu BuildKit + Tools do Github Actions).
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      #   with:
      #     version: "lab:latest"
      #     driver: cloud
      #     endpoint: "victordias94/cloudbuilder"

      # Para extrair as variáveis de metadata de forma condicional
      - name: Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: victordias94/mlflow
          flavor: |
            latest=false
          tags: |
            type=raw,value=04
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          # Condiçao para realizar o push, qualquer uma menos o pull request.
          push: ${{ github.event_name != 'pull_request' }}
          # Coloco o que foi utilizado em cache (Precisa rodar a primeira vez antes de o cache funcionar).
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Adiciono as multiplataformas que diferentes usuários podem utilizar para versionar as imagens utilizadas.
          platforms: linux/amd64
          # outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}

      # Automatiza comentários para quando a PR é criada
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v3
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed
      
        # If PR, put image tags in the PR comments
      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace
  
